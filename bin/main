#!/usr/bin/env ruby

class TicTacToe
  # define board and how it'll display to the user
  puts board = [" ", " ", " ", " ", " ", " ", " ", " ", " "]

  def play_board(board)
    puts " #{board[0]} | #{board[1]} | #{board[2]} "
    puts '-----------'
    puts " #{board[3]} | #{board[4]} | #{board[5]} "
    puts '-----------'
    puts " #{board[6]} | #{board[7]} | #{board[8]} "
  end

  # define which space within the board is selected
  # input is converted into a integer and substracter one so
  # that it matches the number of indexes

  def selected_space(space_number)
    space_number.to_i - 1
  end

  # define which space in the board is taken depending on the user's input

  def play(board, space, player)
    board[space] = player
  end

  # define a method to validate whether or not a space in the board is already taken

  def empty_space?(board, index)
    if board[index] == '' || board[index] == ' ' || board[index].nil?
      false
    else
      true
    end
  end

  # define whether or not an user's input is valid i.e. that it corresponds to one of
  # the spaces in the board

  def valid_input(board, index)
    true if index == 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 && !empty_space?(board, index)
  end

  # define a method to count the number of turns that've been taken

  def turn_counter(board)
    counter = 0
    board.each do |token|
      counter += 1 if %w[X O].include? token
    end
    counter
  end

  # use turn_counter to define the current_player method

  def current_player(board)
    turn_counter board.even? ? 'X' : 'O'
  end

  # define a loop for the game to run

  def game(board)
    turn(board) until over?(board)
    if won?(board)
      winner(board) == 'X' || winner(board) == 'O'
      puts "The winner is #{winner(board)}!"
    elsif draw?(board)
      puts 'It\'s a draw'
    end
  end

  # define a method to ask the players for their input

  def player_move(board)
    puts 'Enter a number from 1 to 9'
    space_number = gets.strip
    index = selected_space(space_number)
    if valid_input?(board, index)
      move(board, index, current_player(board))
      player_move(board)
    end
    play_board(board)
  end


end